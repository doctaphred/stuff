#!/usr/bin/env bash
set -euo pipefail

test -v STUFF || export STUFF="$(dirname "$(dirname "$(realpath "$0")")")"

log () {
    >&2 echo "$@"
}

command="${1-}"
shift

# TODO: Define commands as functions, replace recursive `stuff` commands
# with function calls, and replace the case statement with just "$@" or
# something. (Should probably do some sort of validation first.)
case "${command}" in
    key)
        # shasum reads from stdin by default.
        # The first 64 characters of the output is the SHA-256 hash.
        shasum -a256 | cut -c-64
    ;;
    verify)
        expected="$1"
        actual="$(stuff key)"
        test "$actual" = "$expected"
    ;;
    store)
        tempfile="$(mktemp -t stuff)"
        # Write stdin to the temp file, and also derive the key.
        key="$(tee "$tempfile" | stuff key)"
        mkdir -p "$STUFF/data"
        # Now that we know the key, we can just move the temp file.
        mv "$tempfile" "$STUFF/data/$key"
        echo "$key"
    ;;
    learn)
        key="$1"
        url="$2"
        mkdir -p "$STUFF/urls"
        echo "$url" >>"$STUFF/urls/$key"
    ;;
    locate)
        key="$1"
        if test -e "$STUFF/urls/$key"; then
            cat "$STUFF/urls/$key"
        else
            log "No known URLs for $key"
        fi
    ;;
    download)
        url="$1"
        key="$(curl "$url" | stuff store)"
        # Save the URL for future use.
        stuff learn "$key" "$url"
        echo "$key"
    ;;
    get)
        key="$1"
        if test -e "$STUFF/data/$key"; then
            # Verify the integrity of the data we have.
            stuff verify "$key" <"$STUFF/data/$key"
        else
            log "Data not found"
            if test -e "$STUFF/urls/$key"; then
                # The data doesn't exist, but a URLs file does.
                # Count the lines in the URLs file, and remove the
                # obnoxious leading whitespace from the result.
                n="$(wc -l <"$STUFF/urls/$key" | tr -d ' ')"
                log "Attempting to download from $n URL(s)"
                while read url; do
                    log "Downloading from $url"
                    actual="$(stuff download "$url" || continue)"
                    if test "$actual" = "$key"; then
                        log "Successfully downloaded $key"
                        break
                    else
                        log "Downloaded unexpected data: $actual"
                    fi
                done < "$STUFF/urls/$key"
                if ! test -e "$STUFF/data/$key"; then
                    log "ERROR: could not download $key"
                    exit 1
                fi
            else
                log "ERROR: no data or URLs defined for $key"
                exit 1
            fi
        fi
        cat "$STUFF/data/$key"
    ;;
    call)
        key="$1"
        name="$2"
        mkdir -p "$STUFF/names"
        echo "$key" >"$STUFF/names/$name"
    ;;
    define)
        name="$1"
        if test -e "$STUFF/names/$name"; then
            cat "$STUFF/names/$name"
        else
            log "Nothing is named '$name'"
            exit 1
        fi
    ;;
    lookup)
        name="$1"
        key="$(stuff define "$name")"
        stuff get "$key"
    ;;
    clear)
        key="$1"
        rm "$STUFF/data/$key"
    ;;
    purge)
        key="$1"
        rm "$STUFF/data/$key" 2>/dev/null || true
        rm "$STUFF/urls/$key" 2>/dev/null || true
        # TODO: remove from names?
    ;;
    list)
        ls "$STUFF/data"
    ;;
    names)
        ls "$STUFF/names"
    ;;
    *)
        echo "$@"
        echo '¯\_(ツ)_/¯'
        exit 1
    ;;
esac
