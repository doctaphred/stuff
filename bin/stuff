#!/usr/bin/env bash
set -euo pipefail

test -v STUFF || STUFF="$(dirname "$(dirname "$(realpath "$0")")")"

log () {
    # Echo cyan text to stderr with some contextual information.
    info="$(basename "$0").${FUNCNAME[1]}"

    # TODO: full call stack?
    # info="$(basename "$0") (${FUNCNAME[@]})"

    # TODO: slice off head ('log') and tail ('main')?
    # stack_depth="${#FUNCNAME[@]}"
    # (Not sure how to actually do the array slice correctly...)

    >&2 echo -e "\033[0;36m[${info}] ${@}\033[0m"
    # TODO: Multiple colors, add option to disable.
}

_enforce_nargs () {
    n="$1"
    shift
    if test "$#" != "$n"; then
        info="$(basename "$0").${FUNCNAME[1]}"
        >&2 echo -e "\033[1;31mERROR: $info expected $n arg(s), but received $#: '$*'\033[0m"
        return 1
    fi
}

now () {
    # Echo the current UTC date and time in ISO 8601 format.
    date -u +%FT%TZ
    # NOTE: macOS' `date` lacks the `--iso-8601` option.
}

each () {
    while read line; do
        "$@" "$line" || log "ERROR: '$@ $line' returned $?"
    done
}

where () {
    echo "$STUFF"
}

archive () {
    now="$(now)"
    while read path; do
        dest="$STUFF/archive/$now/$path"
        mkdir -p "$(dirname "$dest")"
        mv "$path" "$dest"
    done
    echo "$now"
}

restore () {
    # Utility function.
    # Restore the specified archive.
    _enforce_nargs 1 "$@"
    timestamp="$1"
    cp -R "$STUFF/archive/$timestamp/" "$STUFF/"
}

key () {
    # Derive the key for the data at stdin.
    #
    # shasum reads from stdin by default.
    # The first 64 characters of the output is the SHA-256 hash.
    echo -n "sha256:$(shasum -a256 | cut -c-64)"
}

matches () {
    # Return 1 if the data at stdin does not match the key with the given name.
    _enforce_nargs 1 "$@"
    key="$(define "$1")"
    matches-key "$key"
}

matches-key () {
    # Return 1 if the data at stdin does not match the expected key.
    _enforce_nargs 1 "$@"
    expected_key="$1"
    actual_key="$(key)"
    if test "$actual_key" != "$expected_key"; then
        log "ERROR: expected key '$expected_key', got key '$actual_key'"
        return 1
    fi
}

save () {
    # Save the data from stdin and echo its key.
    tempfile="$(mktemp -t stuff)"
    log "Using tempfile $tempfile"
    # Write stdin to the temp file, and also derive the key.
    key="$(tee "$tempfile" | key)"
    log "Determined key '$key'"
    mkdir -p "$STUFF/data"
    # Now that we know the key, we can just move the temp file.
    mv "$tempfile" "$STUFF/data/$key"
    log "Saved data with key '$key'"
    echo "$key"
}

save-as () {
    # Save the data from stdin, and give it a name.
    _enforce_nargs 1 "$@"
    name="$1"
    key="$(save)"
    log "Saving key '$key' as '$name'"
    name-key "$key" <<<"$name"
    log "Saved key '$key' as '$name'"
    echo "$key"
}

learn-url () {
    # Learn a URL for a key.
    #
    # TODO: multiple at once?
    # TODO: forget?
    _enforce_nargs 2 "$@"
    key="$1"
    url="$2"
    urls_file="$STUFF/urls/$key"
    mkdir -p "$STUFF/urls"
    echo "$url" >>"$urls_file"

    # Deduplicate adjacent URLs.
    # TODO: Just avoid writing duplicates in the first place?
    temp_file="$(mktemp)"
    uniq "$urls_file" "$temp_file"
    mv "$temp_file" "$urls_file"
}

locate () {
    _enforce_nargs 1 "$@"
    name="$(define "$1")"
    locate-key "$name"
}

locate-key () {
    # List known URLs for the given key.
    #
    # TODO: multiple at once?
    _enforce_nargs 1 "$@"
    key="$1"
    urls="$STUFF/urls/$key"
    if n="$(<"$urls" wc -l | tr -d ' ')"; then
        log "$n URL(s) for key '$key'"
        cat "$urls"
    else
        log "No known URLs for $key"
        return 1
    fi
}

download () {
    # Download data from the URL, and save both for future use.
    #
    # TODO: multiple at once?
    _enforce_nargs 1 "$@"
    url="$1"
    log "Downloading $url"
    key="$(curl --proto-default https --location "$url" | save)"
    # Save the URL for future use.
    learn-url "$key" "$url"
    mkdir -p "$STUFF/responses/$url"
    echo "$key" | tee "$STUFF/responses/$url/$(now)"
}

download-all () {
    xargs -n1 -P32 "$0" download
    # while read url; do download "$url"; done
    # key="$(curl "$url" | save)"
    # # Save the URL for future use.
    # learn-url "$key" "$url"
    # echo "$key"
}

download-as () {
    _enforce_nargs 2 "$@"
    name="$1"
    url="$2"
    key="$(download "$2")"
    name-key "$key" <<<"$name"
    echo "$key"
}

update () {
    _enforce_nargs 1 "$@"
    name="$1"
    old_key="$(define "$name")"
    locate-key "$old_key" | while read url; do
        new_key="$(download "$url")" || continue
        # If the key is different, the name will be reassigned.
        name-key "$new_key" <<<"$name"
        echo "$new_key"
        return
    done
    return 1
}

get () {
    # Retrieve the data with the given name.
    #
    # TODO: multiple at once?
    key="$(define "$1")"
    get-key "$key"
}

get-key () {
    # Retrieve the data with the given key, either from cache or a URL.
    _enforce_nargs 1 "$@"
    key="$1"
    if test -e "$STUFF/data/$key"; then
        # Verify the integrity of the data we have.
        log "Verifying key '$key'"
        matches-key "$key" <"$STUFF/data/$key"
    else
        log "No local data for $key"
        locate-key "$key" | while read url; do
            # The data doesn't exist, but a URLs file does.
            log "Downloading from $url"
            actual="$(download "$url")" || continue
            if test "$actual" = "$key"; then
                log "Successfully downloaded $key"
                break
            else
                log "Received unexpected data: $actual"
            fi
        done

        if ! test -e "$STUFF/data/$key"; then
            log "ERROR: could not retrieve $key"
            return 1
        fi
    fi
    cat "$STUFF/data/$key"
}

alias () {
    # Assign additional names to this name's key.
    _enforce_nargs 1 "$@"
    key="$(define "$1")"
    name-key "$key"
}

name-key () {
    # Assign names to the key.
    # TODO: Accept names from *either* stdin or $@.
    _enforce_nargs 1 "$@"
    key="$1"
    mkdir -p "$STUFF/names"
    while read name; do
        log "Name '$name' now refers to '$key'"
        echo "$key" >"$STUFF/names/$name"
    done
}

unname () {
    _enforce_nargs 1 "$@"
    name="$1"
    if test -e "$STUFF/names/$name"; then
        log <"$STUFF/names/$name"
        rm "$STUFF/names/$name"
    else
        log "Nothing is named '$name'"
        return 1
    fi
}

define () {
    # Get the key with the given name.
    #
    # TODO: multiple at once?
    _enforce_nargs 1 "$@"
    name="$1"
    if test -e "$STUFF/names/$name"; then
        # key="$(cat "$STUFF/names/$name")"
        key="$(<"$STUFF/names/$name")"
        log "Name '$name' refers to key '$key'"
        echo "$key"
        # cat "$STUFF/names/$name"
    else
        log "Nothing is named '$name'"
        return 1
    fi
}

clear () {
    _enforce_nargs 1 "$@"
    key="$(define "$1")"
    clear-key "$key"
}

clear-key () {
    # Remove the key's data from cache.
    #
    # TODO: multiple at once?
    _enforce_nargs 1 "$@"
    key="$1"
    log "Clearing local data for '$key'"
    rm "$STUFF/data/$key"
}

purge () {
    _enforce_nargs 1 "$@"
    key="$(define "$1")"
    purge-key "$key"
}

purge-key () {
    # Remove the key's data, and any known URLs.
    #
    # TODO: multiple at once?
    _enforce_nargs 1 "$@"
    key="$1"
    rm "$STUFF/data/$key" 2>/dev/null || true
    rm "$STUFF/urls/$key" 2>/dev/null || true
    # TODO: remove from names?
}

list () {
    # List all names.
    env ls -1 "$STUFF/names"
}

list-keys () {
    # List all cached keys.
    env ls -1 "$STUFF/data"
}

clean () {
    _enforce_nargs 1 "$@"
    key="$(define "$1")"
    clean-key "$key"
}

clean-key () {
    _enforce_nargs 1 "$@"
    key="$1"
    if ! test -e "$STUFF/data/$key"; then
        log "ERROR: key '$key' not found"
        return 1
    elif matches-key "$key" <"$STUFF/data/$key"; then
        log "Verified data at key '$key'"
    else
        clear-key "$key"
        log "Deleted corrupted data at key '$key'"
    fi
}

sanitize () {
    # Clear any named corrupted data from the cache.
    # TODO: Avoid redundant aliases.
    list | xargs -L1 -P"$(nproc)" "$0" clean
}

sanitize-keys () {
    # Clear any corrupted data from the cache.
    list-keys | xargs -L1 -P"$(nproc)" "$0" clean-key
}

help () {
    log "$0"
    # `declare -F` lists all functions defined in the current shell,
    # but with the prefix 'declare -f ' for some reason.
    declare -F | sed 's/^declare -f //'
}

# If no command is given, print help and exit.
if test $# = 0; then
    help
else
    "$@"
fi
